<UserControl x:Class="TicketeX_.Views.CreateTicketView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             mc:Ignorable="d"
             d:DesignHeight="300" d:DesignWidth="500"
             Background="Transparent"  >
    <UserControl.Resources>
        <CollectionViewSource Source="{Binding Severities}" x:Key="SeverityList" />
        <CollectionViewSource Source="{Binding Destinations}" x:Key="DestinationList"/>
        <Style TargetType="Label">
            <Setter Property="FontFamily" Value="Arial"/>
            <Setter Property="Foreground" Value="Azure"/>
            <Setter Property="FontWeight" Value="Regular"/>
            <Setter Property="FontSize" Value="12"/>
        </Style>
    </UserControl.Resources>
    <Grid Margin="10" x:Name="CreateTicketForm">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <Label>Severity:</Label>
        
        <Grid Grid.Row="0" Grid.Column="1">
                    <!-- 
                    
                    Dodatkowy ficzer: Combobox z zaokrąglonymi rogami. Wbrew pozorom bez rozdzielania elementu na części składowe, zaokrąglenie rogów
                    na combobox jest niemożliwe. Mam przeczucie, że jestem pierwszą osobą, która wymyśliła jak to zrobić bez zbędnego kodu
                    co przyczyniło się do mojego pierwszego w życiu wpisu na Stack OVerflow w temacie o zaokrąglaniu rogów na combobox.
                    Pomysł zaczerpnięty z narzędzi Adobe - jeśli chcemy uzyskać pożądany kształt przycinamy jedne kształty innymi. W tym
                    przypadku przyciąłem rogi comboboxa okalającym go borderem.
                    
                     -->
            <Border x:Name="SeverityRoundedBorder"
                    CornerRadius="2"
                    Background="Transparent"
                    BorderBrush="White"
                    BorderThickness="1"
                    Height="25"
                    Margin="0,5,60,5"
                    HorizontalAlignment="Stretch"
                    MaxWidth="270">
                <!-- 
                
                Dodatkowy ficzer: Placeholder do comboboxa. Wbrew pozorom bardzo trudny element do implementacji
                w wpf bez natywnej property placeholder. Dlaczego? Jakiekolwiek pierwotnie ustawiony Selectedindex nie łączy się z
                bindowaniem do listy we viewmodel. Jesli zaś użyjemy compositecollection 
                to z kolei bindowanie SelectedItem z viewmodelu nie działa! Dom wariatów.
                Na szczeście można zmienić wartość pola poprzez odwołanie w code behind za pomocą handlera SelectionChanged.
                Żeby tego było mało to można zupełnie usunąć placeholder od razu po otwarciu dropdowna w
                osobnym handlerze DropdownOpened, tak żeby nie istniał jako możliwa opcja do wyboru.
                
                 -->
                <ComboBox x:Name="SeverityComboBox"
                          Margin="0"
                          IsEnabled="True"
                          BorderThickness="0"
                          Background="White"
                          Foreground="Black"
                          SelectedIndex="0"
                          SelectionChanged="SeverityComboBox_OnSelectionChanged"
                          DropDownOpened="SeverityComboBox_OnDropDownOpened">
                    <ComboBox.ItemsSource>
                        <CompositeCollection x:Name="SeverityDropdownCollection">
                            <ComboBoxItem x:Name="SeverityPlaceholder" Visibility="Collapsed">Please select the issue severity</ComboBoxItem>
                            <!-- Ponoć musi być poprzez StaticResource, bo CollectionContainer nie binduje się poprawnie z bezpośrednio wpisanej właściwości -->
                            <CollectionContainer Collection="{Binding Source={StaticResource ResourceKey=SeverityList}}"/>
                        </CompositeCollection>
                    </ComboBox.ItemsSource>
                </ComboBox>
            </Border>
                    
                    <!-- 
                    
                    Dodatkowy ficzer: Implementacja popupa z błędem na comboboxie zajęło mi 6,5h i przyznam szczerze, że było jednym z największych wyzwań w aplikacji.
                    Jestem przekonany, że tego rodzaju popup na comboboxie nie może się otwierać z DataTrigger na obecność błędu na tymże comboboxie.
                    W związku z tym i tym, że na powyższym combo jest tylko jeden możliwy błąd do walidacji, informacja o błędzie jest triggerowana przy
                    ostatecznej walidacji pól po naciśnięciu Send. To z kolei zmienia IsOpen na True przy zaistnieniu warunku i Popup otwiera się poprawnie i
                    zamyka przy otwarciu dropdowna.
                    
                     -->
                    
            <Popup IsOpen="{Binding ValidatedSeverity, Mode=TwoWay}"
                           PlacementTarget="{Binding ElementName=SeverityRoundedBorder}"
                           Placement="Right"
                           AllowsTransparency="True"
                           HorizontalOffset="10">
                        <Border CornerRadius="4"
                                Background="Azure"
                                BorderBrush="DarkRed"
                                BorderThickness="1"
                                Padding="3">
                            <TextBlock Text="Please select severity before sending ticket"
                                       Foreground="DarkRed"
                                       FontSize="12"
                                       Padding="5"/>
                        </Border>
            </Popup>
        </Grid>
        <Label Grid.Row="2" Grid.Column="0">Reported by:</Label>
        <TextBox Grid.Row="2" 
                 Grid.Column="1" 
                 Margin="0,0,60,0" 
                 x:Name="ReportedByTextBox" 
                 Validation.ErrorTemplate="{x:Null}" 
                 Text="{Binding ReportedBy, UpdateSourceTrigger=PropertyChanged, ValidatesOnNotifyDataErrors=True}" 
                 Style="{StaticResource FormTextBoxTheme}"/>
        <Label Grid.Row="3" Grid.Column="0">Destination:</Label>
        <Grid Grid.Row="3" Grid.Column="1">
            
            <Border x:Name="DestinationRoundedBorder" CornerRadius="2" 
                    Background="Transparent" 
                    BorderBrush="White" 
                    BorderThickness="1"
                    Height="25"
                    Margin="0,5,60,5"
                    HorizontalAlignment="Stretch"
                    MaxWidth="270">
                
                <ComboBox x:Name="DestinationComboBox"
                          Margin="0"
                          IsEnabled="True"
                          BorderThickness="0"
                          Background="White"
                          Foreground="Black"
                          SelectedIndex="0"
                          SelectionChanged="DestinationComboBox_OnSelectionChanged"
                          DropDownOpened="DestinationComboBox_OnDropDownOpened">
                    <ComboBox.ItemsSource>
                        <CompositeCollection x:Name="DestinationDropdownCollection">
                            <ComboBoxItem x:Name="DestinationPlaceholder" Visibility="Collapsed">Please select ticket recipient</ComboBoxItem>
                            <CollectionContainer Collection="{Binding Source={StaticResource ResourceKey=DestinationList}}"/>
                        </CompositeCollection>
                    </ComboBox.ItemsSource>
                </ComboBox>
            </Border>
            <Popup IsOpen="{Binding ValidatedDestination, Mode=TwoWay}"
                   PlacementTarget="{Binding ElementName=DestinationRoundedBorder}"
                   Placement="Right"
                   AllowsTransparency="True"
                   HorizontalOffset="10">
                <Border CornerRadius="4"
                        Background="Azure"
                        BorderBrush="DarkRed"
                        BorderThickness="1"
                        Padding="3">
                    <TextBlock Text="Please specify ticket recipient"
                               Foreground="DarkRed"
                               FontSize="12"
                               Padding="5"/>
                </Border>
            </Popup>
        </Grid>
        
        <Label Grid.Row="4" Grid.Column="0">Description:</Label>
        <TextBox x:Name="DescriptionTextBox" 
                 Grid.Row="4" 
                 Grid.Column="1" 
                 Validation.ErrorTemplate="{x:Null}"
                 Text="{Binding Description, UpdateSourceTrigger=PropertyChanged, ValidatesOnNotifyDataErrors=True}"
                 Style="{StaticResource DescriptionFormInputTheme}"/>
        <Button Grid.Row="5" 
                Grid.Column="1" 
                HorizontalAlignment="Right" 
                Width="100"
                Height="25"
                Margin="0,10,20,0" 
                Command="{Binding CreateTicketCommand}"
                Background="#274472">
            <Button.Template>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                            CornerRadius="10"
                            BorderThickness="1">
                        <ContentPresenter HorizontalAlignment="Center" 
                                          VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Button.Template>
            <StackPanel Orientation="Horizontal">
                <TextBlock Text="Send" 
                           Foreground="Azure"
                           VerticalAlignment="Center" 
                           Margin="0,0,8,0"/>
                <materialDesign:PackIcon Kind="Send" 
                                         Background="Transparent" 
                                         Foreground="Azure"
                                         VerticalAlignment="Center"/>
            </StackPanel>
        </Button>
    </Grid>
</UserControl>
